!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Callback	run.py	/^from keras.callbacks import Callback$/;"	i
Conv2D	src/models/model.py	/^from tensorflow.keras.layers import Conv2D, MaxPooling2D$/;"	i
Dense	src/models/model.py	/^from tensorflow.keras.layers import Dense, Dropout, Flatten$/;"	i
Dropout	src/models/model.py	/^from tensorflow.keras.layers import Dense, Dropout, Flatten$/;"	i
Experiment	run.py	/^from sacred import Experiment$/;"	i
Flatten	src/models/model.py	/^from tensorflow.keras.layers import Dense, Dropout, Flatten$/;"	i
K	src/data_processing/data_loader.py	/^from tensorflow.keras import backend as K$/;"	i
LogMetrics	run.py	/^    class LogMetrics(Callback):$/;"	c	function:my_main
MaxPooling2D	src/models/model.py	/^from tensorflow.keras.layers import Conv2D, MaxPooling2D$/;"	i
MongoObserver	run.py	/^from sacred.observers import MongoObserver$/;"	i
Sequential	src/models/model.py	/^from tensorflow.keras.models import Sequential$/;"	i
apply_backspaces_and_linefeeds	run.py	/^from sacred.utils import apply_backspaces_and_linefeeds$/;"	i
db_name	run.py	/^    db_name=db_name)$/;"	v
db_name	run.py	/^db_name = "sacred_db_1"$/;"	v
ex	run.py	/^ex = Experiment("mnist_cnn")$/;"	v
keras	src/data_processing/data_loader.py	/^from tensorflow import keras$/;"	i
keras	src/models/model.py	/^from tensorflow import keras$/;"	i
make_data	run.py	/^from src.data_processing.data_loader import make_data$/;"	i
make_data	src/data_processing/data_loader.py	/^def make_data(params):$/;"	f
mnist	src/data_processing/data_loader.py	/^from tensorflow.keras.datasets import mnist$/;"	i
my_config	run.py	/^def my_config():$/;"	f
my_main	run.py	/^def my_main(params_selected):$/;"	f
my_metrics	run.py	/^def my_metrics(_run, logs):$/;"	f
on_epoch_end	run.py	/^        def on_epoch_end(self, _, logs={}):$/;"	m	class:my_main.LogMetrics
params	run.py	/^from src.config import params$/;"	i
params	src/config.py	/^params = [{$/;"	v
set_model	run.py	/^from src.models.model import set_model$/;"	i
set_model	src/models/model.py	/^def set_model(params: dict, input_shape: tuple):$/;"	f
train	run.py	/^from src.train import train$/;"	i
train	src/train.py	/^def train(m, x_train, y_train, x_test, y_test, params, callbacks):$/;"	f
url	run.py	/^    url=url,$/;"	v
url	run.py	/^url = '127.0.0.1:27017'$/;"	v
